name: Overengineered CI/CD Pipeline
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  # Linting stage with multiple linters and formatters
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Run cpplint
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip
          pip3 install cpplint
          cpplint main.cpp
      - name: Run clang-format check
        run: |
          sudo apt-get install -y clang-format
          clang-format -n main.cpp
      - name: Run cppcheck
        run: |
          sudo apt-get install -y cppcheck
          cppcheck --enable=all .
      - name: Run clang-tidy
        run: |
          sudo apt-get install -y clang-tidy
          clang-tidy main.cpp --

  # Build stage with unnecessary dependency steps and caching
  build:
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install build tools
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential ccache
      - name: Install additional dependencies
        run: echo "No additional dependencies needed, but including step"
      - name: Cache build (ccache)
        uses: actions/cache@v3
        with:
          path: ~/.ccache
          key: ${{ runner.os }}-ccache
      - name: Compile application
        env:
          CCACHE_DIR: ~/.ccache
        run: |
          export PATH="/usr/lib/ccache:$PATH"
          make
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: hello-world-binary
          path: ./main

  # Redundant testing stage with multiple frameworks running the same test
  test_google:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: hello-world-binary
      - name: Run tests with GoogleTest (simulated)
        run: |
          echo "Running tests using GoogleTest framework"
          ./main > output.txt
          grep -q "Hello, World!" output.txt

  test_catch:
    needs: build
    runs-on: ubuntu
